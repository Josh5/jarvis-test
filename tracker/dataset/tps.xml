<!--
    This dataset provides details of average transactions per minute.
    It averages transactions over a 15 minute block (aligned on the hour), and 
    provides the average transactions per minute for that fifteen minute block.

    The caller must provide the {$from} to {$to} parameters as dates in Julian
    time (UTC).

    First REST parameter is the application name (optional)
    Second REST parameter is the dataset (or plugin) name (optional)

  -->
<dataset read="*" write="">
    <select>
    <![CDATA[
        SELECT 
            cal.time as t -- Parsing of julian date is much faster than parsing a date string.
            , SUM (CASE WHEN r.start_time IS NOT NULL THEN 1 ELSE 0 END) / 15.0 AS c 
        FROM 
            (SELECT the_date + i.interval as time FROM
                (
                -- I'm using 'cast' here as a poor man's truncate(). The cast/round ensure I get all days partially
                -- covered by from and to.
                -- The - 0.5 is to ensure that morning times are included (by including prior days), due to Julian
                -- dates being at 0.5 for midnight
                SELECT the_date FROM calendar WHERE the_date >= CAST({$from} - 0.5 AS INTEGER) AND the_date <= round({$to})
                ) c,
                (
                SELECT interval FROM day_interval WHERE is_fifteen_minute = 1
                ) i
            ) cal
            LEFT JOIN (
                SELECT start_time, username
                FROM (
                    SELECT start_time, username FROM request 
                    WHERE (app_name IS NULL OR {$1} IS NULL OR {$1} = app_name)
                        AND (dataset IS NULL OR {$2} IS NULL OR {$2} = dataset)
                    UNION ALL 
                    SELECT start_time, username FROM error
                    WHERE (app_name IS NULL OR {$1} IS NULL OR {$1} = app_name)
                        AND (dataset IS NULL OR {$2} IS NULL OR {$2} = dataset)
                ) d
            ) r ON 
                cal.time <= r.start_time AND cal.time + (15.0 / (60 * 24)) > r.start_time
        WHERE
            time >= CAST({$from} AS FLOAT) AND time <= CAST({$to} AS FLOAT) 
            AND (r.username IS NULL OR {$user} IS NULL OR r.username = {$user})
        GROUP BY 
            cal.time
        ORDER BY
            cal.time
    ]]>
    </select>
</dataset>

